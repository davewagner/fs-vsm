package com.example.accessingdatamysql;

import java.util.Optional;

/*
 * This controller class handles http requests. 
 *
 */



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;


@CrossOrigin(origins = {"http://localhost:8081"})
@RestController // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	
	@Autowired // This means to get the bean called userRepository
    private UserRepository userRepository;  // Which is auto-generated by Spring, we will use it to handle the data
	
	@PostMapping(path="/add") //Map only POST requests
	public @ResponseBody String addNewUser (@RequestParam String name, @RequestParam String email) {
		
		// @ResponseBody means the returned String is the response, not a view name
	    // @RequestParam means it is a parameter from the GET or POST request
		
		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}
	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	@PostMapping(path="/delete")
	public @ResponseBody String deleteUser (@RequestParam Integer id) {
		userRepository.deleteById(id);
		return "deleted";
	}
	
	@PutMapping(path="/update")
	public @ResponseBody ResponseEntity<Object> updateUser(@RequestParam String name, @RequestParam String email, @RequestParam Integer id) {
		
		Optional<User> userOptional = userRepository.findById(id);
		if (!userOptional.isPresent())
			return ResponseEntity.notFound().build();
		
		User user = new User();
		user.setId(id);
		user.setName(name);
		user.setEmail(email);
		userRepository.save(user);
		return ResponseEntity.noContent().build();
	}

}
